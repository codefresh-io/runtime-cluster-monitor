prometheus-node-exporter:
  resources:
    limits:
      cpu: '0.1'
      memory: 48Mi
    requests:
      cpu: '0.02'
      memory: 32Mi

alertmanager:
  config:
    <%= template 'alertmanager.yaml.erb', 4, '_alertmanager', binding %>
  templateFiles:
    alerts.tmpl: |
      <%= template 'alerts.tmpl.erb', 6, '_alerts', binding  %>
  alertmanagerSpec:
    resources:
      limits:
        cpu: '0.5'
        memory: 64Mi
      requests:
        cpu: '0.1'
        memory: 48Mi
    routePrefix: /alertmanager/
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: [ReadWriteOnce]
          resources:
            requests:
              storage: 2Gi
    <%= template 'affinity.yaml.erb', 4, '_affinity', binding %>

grafana:
  resources:
    limits:
      cpu: '0.1'
      memory: 128Mi
    requests:
      cpu: '0.02'
      memory: 96Mi
  grafana.ini:
    server:
      root_url: '%(protocol)s://%(domain)s/grafana/'
      serve_from_sub_path: 'true'
  <% if defined? grafana_pass %>
  <% if defined? grafana_user %>
  adminUser: <%= grafana_user %>
  <% end %>
  adminPassword: <%= grafana_pass %>
  <% else %>
    auth:
      disable_login_form: 'true'
      disable_signout_menu: 'true'
    auth.basic:
      enabled: 'false'
    auth.anonymous:
      enabled: 'true'
      org_role: Admin
  <% end %>
  persistence:
    enabled: true
    size: 10Gi
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: 'codefresh'
          orgId: 1
          folder: Codefresh
          type: file
          disableDeletion: true
          editable: false
          options:
            path: /var/lib/grafana/dashboards/codefresh
  dashboards:
    codefresh:
      <%= template 'dashboards.yaml.erb', 6, '_dashboards', binding %>
  additionalDataSources:
    - name: Loki
      type: loki
      url: http://loki-boltdb.loki-boltdb:3100
      access: proxy
      jsonData:
        maxLines: 10000
  <%= template 'affinity.yaml.erb', 2, '_affinity', binding %>

kube-state-metrics:
  resources:
    limits:
      cpu: '0.5'
      memory: 256Mi
    requests:
      cpu: '0.1'
      memory: 192Mi
  <%= template 'affinity.yaml.erb', 2, '_affinity', binding %>

kubeControllerManager:
  enabled: false

<% unless ENV['coredns'] %>
coreDns:
  enabled: false

kubeDns:
  enabled: true
<% end %>

kubeEtcd:
  enabled: false

kubeProxy:
  enabled: false

kubeScheduler:
  enabled: false

prometheusOperator:
  resources:
    limits:
      cpu: '0.1'
      memory: 96Mi
    requests:
      cpu: '0.01'
      memory: 64Mi
  logLevel: error
  <%= template 'affinity.yaml.erb', 2, '_affinity', binding %>

prometheus:
  prometheusSpec:
    resources:
      limits:
        memory: '<%= defined?(prom_ram) ? prom_ram : "6Gi" %>'
        cpu: '<%= defined?(prom_cpu) ? prom_cpu * 2 : "2" %>'
      requests:
        memory: '<%= defined?(prom_ram) ? prom_ram : "6Gi" %>'
        cpu: '<%= defined?(prom_cpu) ? prom_cpu : "1" %>'
    externalUrl: https://<%= ENV['cluster'] %>/prometheus/
    routePrefix: /prometheus/
    scrapeInterval: 10s
    retention: 20d
    additionalScrapeConfigs:
      <%= template 'scrape.yaml.erb', 6, '_scrape', binding %>
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: [ReadWriteOnce]
          resources:
            requests:
              storage: 200Gi
    <%= template 'affinity.yaml.erb', 4, '_affinity', binding %>

defaultRules:
  rules:
    time: false
    kubernetesApps: false
    kubernetesResources: false
    kubernetesSystem: false
    kubeApiserver: false
    kubeApiserverError: false
    kubeApiserverAvailability: false

additionalPrometheusRules:
  - name: cf-rules
    groups:
      <%= template 'alerts.yaml.erb', 6, '_rules', binding %>
      <%= file 'dind-rules.yaml', 6 %>
      <%= file 'loki-rules.yaml', 6 %>
